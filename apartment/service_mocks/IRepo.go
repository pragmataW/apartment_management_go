// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/pragmataW/apartment_management/models"
	mock "github.com/stretchr/testify/mock"
)

// IRepo is an autogenerated mock type for the IRepo type
type IRepo struct {
	mock.Mock
}

// AddAnnouncement provides a mock function with given fields: announcement
func (_m *IRepo) AddAnnouncement(announcement models.Announcement) error {
	ret := _m.Called(announcement)

	if len(ret) == 0 {
		panic("no return value specified for AddAnnouncement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Announcement) error); ok {
		r0 = rf(announcement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDues provides a mock function with given fields: flatNo
func (_m *IRepo) AddDues(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for AddDues")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDuesForAll provides a mock function with given fields:
func (_m *IRepo) AddDuesForAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddDuesForAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMerchant provides a mock function with given fields: uuid, email
func (_m *IRepo) AddMerchant(uuid string, email string) error {
	ret := _m.Called(uuid, email)

	if len(ret) == 0 {
		panic("no return value specified for AddMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(uuid, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFlat provides a mock function with given fields: flatNo
func (_m *IRepo) CreateFlat(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDues provides a mock function with given fields: flatNo
func (_m *IRepo) DeleteDues(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDues")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDuesByEmail provides a mock function with given fields: email
func (_m *IRepo) DeleteDuesByEmail(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDuesByEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFlat provides a mock function with given fields: flatNo
func (_m *IRepo) DeleteFlat(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAnnouncements provides a mock function with given fields:
func (_m *IRepo) GetAllAnnouncements() ([]models.Announcement, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAnnouncements")
	}

	var r0 []models.Announcement
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Announcement, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Announcement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Announcement)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInfoAboutAllFlats provides a mock function with given fields:
func (_m *IRepo) GetAllInfoAboutAllFlats() ([]models.Apartment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllInfoAboutAllFlats")
	}

	var r0 []models.Apartment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Apartment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Apartment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Apartment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInfoAboutFlat provides a mock function with given fields: flatNo
func (_m *IRepo) GetAllInfoAboutFlat(flatNo int) (models.Apartment, error) {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for GetAllInfoAboutFlat")
	}

	var r0 models.Apartment
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.Apartment, error)); ok {
		return rf(flatNo)
	}
	if rf, ok := ret.Get(0).(func(int) models.Apartment); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Get(0).(models.Apartment)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(flatNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDuesCount provides a mock function with given fields: flatNo
func (_m *IRepo) GetDuesCount(flatNo int) (int, error) {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for GetDuesCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(flatNo)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(flatNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailFromMerchant provides a mock function with given fields: merchantOID
func (_m *IRepo) GetEmailFromMerchant(merchantOID string) (string, error) {
	ret := _m.Called(merchantOID)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailFromMerchant")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(merchantOID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(merchantOID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(merchantOID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordAndFlatNoByEmail provides a mock function with given fields: email
func (_m *IRepo) GetPasswordAndFlatNoByEmail(email string) (string, int, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetPasswordAndFlatNoByEmail")
	}

	var r0 string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, int, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateFlatOwner provides a mock function with given fields: apartment
func (_m *IRepo) UpdateFlatOwner(apartment models.Apartment) error {
	ret := _m.Called(apartment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlatOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Apartment) error); ok {
		r0 = rf(apartment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRepo creates a new instance of IRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepo {
	mock := &IRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
