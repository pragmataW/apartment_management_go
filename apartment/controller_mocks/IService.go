// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "github.com/pragmataW/apartment_management/dto"
	mock "github.com/stretchr/testify/mock"

	services "github.com/pragmataW/apartment_management/services"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// AddAnnouncement provides a mock function with given fields: announcement
func (_m *IService) AddAnnouncement(announcement services.Announcement) error {
	ret := _m.Called(announcement)

	if len(ret) == 0 {
		panic("no return value specified for AddAnnouncement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.Announcement) error); ok {
		r0 = rf(announcement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDues provides a mock function with given fields: flatNo
func (_m *IService) AddDues(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for AddDues")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeDuesPrice provides a mock function with given fields: price
func (_m *IService) ChangeDuesPrice(price float64) {
	_m.Called(price)
}

// ChangePayDay provides a mock function with given fields: payDay
func (_m *IService) ChangePayDay(payDay int) error {
	ret := _m.Called(payDay)

	if len(ret) == 0 {
		panic("no return value specified for ChangePayDay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(payDay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFlat provides a mock function with given fields: flatNo
func (_m *IService) CreateFlat(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllDues provides a mock function with given fields: flatNo
func (_m *IService) DeleteAllDues(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllDues")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDues provides a mock function with given fields: flatNo
func (_m *IService) DeleteDues(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDues")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFlat provides a mock function with given fields: flatNo
func (_m *IService) DeleteFlat(flatNo int) error {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAnnouncements provides a mock function with given fields:
func (_m *IService) GetAllAnnouncements() ([]services.Announcement, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAnnouncements")
	}

	var r0 []services.Announcement
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]services.Announcement, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []services.Announcement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.Announcement)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInfoAboutAllFlat provides a mock function with given fields:
func (_m *IService) GetAllInfoAboutAllFlat() ([]services.Apartment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllInfoAboutAllFlat")
	}

	var r0 []services.Apartment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]services.Apartment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []services.Apartment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.Apartment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInfoAboutFlat provides a mock function with given fields: flatNo
func (_m *IService) GetAllInfoAboutFlat(flatNo int) (services.Apartment, error) {
	ret := _m.Called(flatNo)

	if len(ret) == 0 {
		panic("no return value specified for GetAllInfoAboutFlat")
	}

	var r0 services.Apartment
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (services.Apartment, error)); ok {
		return rf(flatNo)
	}
	if rf, ok := ret.Get(0).(func(int) services.Apartment); ok {
		r0 = rf(flatNo)
	} else {
		r0 = ret.Get(0).(services.Apartment)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(flatNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentToken provides a mock function with given fields: payment
func (_m *IService) GetPaymentToken(payment dto.PaymentSendReq) (string, error) {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.PaymentSendReq) (string, error)); ok {
		return rf(payment)
	}
	if rf, ok := ret.Get(0).(func(dto.PaymentSendReq) string); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.PaymentSendReq) error); ok {
		r1 = rf(payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseDuesAutomatically provides a mock function with given fields:
func (_m *IService) IncreaseDuesAutomatically() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncreaseDuesAutomatically")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoginAdmin provides a mock function with given fields: password
func (_m *IService) LoginAdmin(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for LoginAdmin")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: flatNo, mail, password
func (_m *IService) LoginUser(flatNo int, mail string, password string) (string, error) {
	ret := _m.Called(flatNo, mail, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, string) (string, error)); ok {
		return rf(flatNo, mail, password)
	}
	if rf, ok := ret.Get(0).(func(int, string, string) string); ok {
		r0 = rf(flatNo, mail, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(flatNo, mail, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCallback provides a mock function with given fields: merchantOID
func (_m *IService) PaymentCallback(merchantOID string) error {
	ret := _m.Called(merchantOID)

	if len(ret) == 0 {
		panic("no return value specified for PaymentCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(merchantOID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMail provides a mock function with given fields: subject, body, mail
func (_m *IService) SendMail(subject string, body string, mail string) error {
	ret := _m.Called(subject, body, mail)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(subject, body, mail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFlatOwner provides a mock function with given fields: apartment
func (_m *IService) UpdateFlatOwner(apartment services.Apartment) error {
	ret := _m.Called(apartment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlatOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.Apartment) error); ok {
		r0 = rf(apartment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
