// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IConfigManager is an autogenerated mock type for the IConfigManager type
type IConfigManager struct {
	mock.Mock
}

// GetFailUrl provides a mock function with given fields:
func (_m *IConfigManager) GetFailUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFailUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMerchantID provides a mock function with given fields:
func (_m *IConfigManager) GetMerchantID() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMerchantID")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetMerchantKey provides a mock function with given fields:
func (_m *IConfigManager) GetMerchantKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMerchantKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMerchantSalt provides a mock function with given fields:
func (_m *IConfigManager) GetMerchantSalt() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMerchantSalt")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOkUrl provides a mock function with given fields:
func (_m *IConfigManager) GetOkUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOkUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewIConfigManager creates a new instance of IConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConfigManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *IConfigManager {
	mock := &IConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
